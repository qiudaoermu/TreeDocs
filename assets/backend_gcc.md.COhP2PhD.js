import{_ as a,c as s,o as i,a3 as e}from"./chunks/framework.BjXKLoyG.js";const u=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"backend/gcc.md","filePath":"backend/gcc.md","lastUpdated":1716258578000}'),t={name:"backend/gcc.md"},n=e(`<p>GCC（GNU Compiler Collection，GNU 编译器套装），是一套由 GNU 开发的编程语言编译器。GCC 原名为 GNU C 语言编译器，因为它原本只能处理 C 语言。GCC 快速演进，变得可处理 C++、Fortran、Pascal、Objective-C、Java, 以及 Ada 等他语言</p><h3 id="gcc-使用" tabindex="-1">gcc 使用 <a class="header-anchor" href="#gcc-使用" aria-label="Permalink to &quot;gcc 使用&quot;">​</a></h3><p>gcc 把 C++编译成二进制文件,让机器可以直接运行</p><hr><h3 id="_1-新建-hello-cpp" tabindex="-1">1.新建 hello.cpp <a class="header-anchor" href="#_1-新建-hello-cpp" aria-label="Permalink to &quot;1.新建 hello.cpp&quot;">​</a></h3><p>hello.cpp 内容示例：</p><div class="language-c vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">c</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">#include</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &lt;stdio.h&gt;</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">int</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">() {</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">  printf</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;from douban&#39;s hello, NanRenBan!!!! </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">\\n</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">);</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">  return</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 0</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">;</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">}</span></span></code></pre></div><h3 id="_2-然后编译-hello-cpp" tabindex="-1">2.然后编译 hello.cpp <a class="header-anchor" href="#_2-然后编译-hello-cpp" aria-label="Permalink to &quot;2.然后编译 hello.cpp&quot;">​</a></h3><div class="language-bash vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">gcc</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> hello.cpp</span></span></code></pre></div><p>产生默认文件 a.out 也可以指定输出文件名称，检测文件是否是可执行文件使用<strong>file</strong>命令</p><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>file ng</span></span></code></pre></div><blockquote><p>结果 <strong>ng: Mach-O 64-bit executable x86_64</strong></p></blockquote><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>gcc hello.cpp -o ng</span></span></code></pre></div><h3 id="_3-最后可执行文件" tabindex="-1">3.最后可执行文件 <a class="header-anchor" href="#_3-最后可执行文件" aria-label="Permalink to &quot;3.最后可执行文件&quot;">​</a></h3><div class="language- vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang"></span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span>./ng</span></span></code></pre></div><p>(和 nginx 一样哦)</p><blockquote><p>O:from douban&#39;s hello, NanRenBan!!!!</p></blockquote>`,17),l=[n];function p(h,c,o,d,r,k){return i(),s("div",null,l)}const b=a(t,[["render",p]]);export{u as __pageData,b as default};
